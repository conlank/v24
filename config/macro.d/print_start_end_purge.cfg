
[gcode_macro PRINT_START]
gcode:
    M117 Starting
    M107                                              ; Turn off fan
    CLEAR_PAUSE                                       ; Reset pause state
    BED_MESH_CLEAR                                    ; Clear bed mesh
    M104 S0                                           ; Turn off hotend
    G28
    G0 X175 Y175 Z20 F8000
    HEAT_SOAK CHAMBER_TARGET={params.CHAMBER_TARGET|default(0)|int} BED_TEMP={params.BED|int} SOAK_MINS={params.SOAK_MINS|default(10)|int}
    M117 Heating
    M140 S{params.BED|int}
    M190 S{params.BED|int}
    QUAD_GANTRY_LEVEL
    G28 Z
    G0 X175 Y175 Z20 F8000
    M109 S200
    CLEAN_NOZZLE
    G28 Z
    ;CALIBRATE_Z
    BED_MESH_CLEAR
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
    ;ADAPTIVE_BED_MESH SIZE={FL_SIZE}
    BED_MESH_CALIBRATE
    #CALIBRATE_Z
    G0 X175 Y175 Z20 F8000
    M117 Heating
    M109 S{params.EXTRUDER|int}
    CLEAN_NOZZLE
    SET_GCODE_OFFSET Z=0
    CALIBRATE_Z
    ;HOUR_COUNTER_ON
    M400
    M83
    G92 E0
    G0 E10 ; matches the retraction in PRINT_END
    G92 E0
    PRIME_LINE
    M117 First Layer
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=600

[gcode_macro PRINT_END]
gcode:
    # SET_PIN PIN=exhaust_fan VALUE=1
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-25.0 F900                 ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90
    G0 X30 Y325 F5000
    ;PARK
    ;HOUR_COUNTER_OFF
    M400                           ; wait for buffer to clear
    M106 S255                      ; Turn on fan, cool down faster
    M140 S0                        ; Turn off bed
    # Allow some time for the nozzle to ooze out any remaining filament after retraction
    # This is stupid, why is this thing still oozing!?
    {% for timer in range(60, 0, -1) %}
    M117 Waiting for ooze, {timer}s left.
    G4 P1000
    {% endfor %}
    M117 Cooling Down
    M109 S185
    CLEAN_NOZZLE
    M107
    TURN_OFF_HEATERS
    BED_MESH_CLEAR
    M117 Scrubbing Chamber Air...
    M118 Cycling the Nevermore
    UPDATE_DELAYED_GCODE ID=AIR_FILTER_STOP_DELAYED DURATION=600 ; Schedule exhaust fan shutdown
    ;M117 Done
    M118 Done Printing.
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=600

[gcode_macro PRIME_LINE]
gcode:
    SAVE_GCODE_STATE NAME=BEFORE_PRIME
    M117 Printing Prime Line
    G90 ; Absolute Position
    M83 ; Relative Extrusion
    G92 E0 ; Reset Extruder
    G1 X5 Y2 Z0.3 F5000
    G1 E10.0 ; Pre-purge, this should match retract in PRINT_END
    G1 X205 Y2 E20 F1500 ; 200mm line
    G1 X205 Y3 ; Move up
    G1 X10 E20 F1500 ; 200mm line
    G1 Z2.0 F3000
    G92 E0 ; Reset Extruder
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=60
    RESTORE_GCODE_STATE NAME=BEFORE_PRIME


[gcode_macro ADAPTIVE_BED_MESH]
description: Perform a bed mesh, but only where and when it's needed
gcode:
    # 1 ----- GET ORIGINAL BEDMESH PARAMS FROM CONFIG ----------------------
    {% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
    {% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
    {% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
    {% set algo = printer["configfile"].config["bed_mesh"]["algorithm"] %}
    {% set xMeshPPS, yMeshPPS = printer["configfile"].config["bed_mesh"]["mesh_pps"].split(',')|map('trim')|map('int') %}

    # If the SIZE parameter is defined and set not a dummy placeholder, we do the adaptive
    # bed mesh logic. If it's ommited, we still do the original BED_MESH_CALIBRATE function
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}

        # 2 ----- GET MESH SIZE AND MARGIN FROM MACRO CALL --------------------
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
        {% set margin = params.MARGIN|default(5)|int %}

        # 3 ----- APPLY MARGINS ----------------------------------------------
        # We use min/max function as we want it to be constrained by the original
        # bedmesh size. This will avoid going outside the machine limits
        {% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
        {% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
        {% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
        {% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}

        # 4 ----- COMPUTE A NEW PROBE COUNT ----------------------------------
        # The goal is to have at least the same precision as from the config. So we compute an equivalent number
        # of probe points on each X/Y dimensions (distance between two points should be the same as in the config)
        {% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
        {% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}

        # Then, three possibilities :
        # a) Both dimensions have less than 3 probe points : the bed_mesh is not needed as it's a small print.
        # b) If one of the dimension is less than 3 and the other is greater. The print looks to be elongated and
        #    need the adaptive bed_mesh : we add probe points to the small direction to reach 3 and be able to do it.
        # c) If both direction are greater than 3, we need the adaptive bed_mesh and it's ok.
        # At the end we control (according to Klipper bed_mesh method: "_verify_algorithm") that the computed probe_count is
        # valid according to the choosen algorithm or change it if needed.
        {% if xProbeCnt < 3 and yProbeCnt < 3 %}
            RESPOND MSG="Adaptive bed mesh: mesh not needed"
            
        {% else %}
            {% set xProbeCnt = [3, xProbeCnt]|max %}
            {% set yProbeCnt = [3, yProbeCnt]|max %}

            # We verify that the number of probe points on each axis is odd or add
            # one to it. This is to have a relative_reference_index point at the center of the mesh
            {% if xProbeCnt % 2 == 0 %}
                {% set xProbeCnt = xProbeCnt + 1 %}
            {% endif %}
            {% if yProbeCnt % 2 == 0 %}
                {% set yProbeCnt = yProbeCnt + 1 %}
            {% endif %}

            # Check of the probe points and interpolation algorithms according to Klipper code
            {% if xMeshPPS != 0 or yMeshPPS != 0 %}
                {% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
                {% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
                {% if algo == "lagrange" and probeCntMax > 6 %}
                    # Lagrange interpolation tends to oscillate when using more than 6 samples: swith to bicubic
                    {% set algo = "bicubic" %}
                {% endif %}
                {% if algo == "bicubic" and probeCntMin < 4 %}
                    {% if probeCntMax > 6 %}
                        # Impossible case: need to add probe point on the small axis to be >= 4 (we want 5 to keep it odd)
                        {% if xProbeCnt > yProbeCnt %}
                            {% set yProbeCnt = 5 %}
                        {% else %}
                            {% set xProbeCnt = 5 %}
                        {% endif %}
                    {% else %}
                        # In this case bicubic is not adapted (less than 4 points): switch to lagrange
                        {% set algo = "lagrange" %}
                    {% endif %}
                {% endif %}
            {% endif %}

            # 5 ----- COMPUTE THE RELATIVE_REFERENCE_INDEX POINT --------------------
            {% set rRefIndex = (((xProbeCnt * yProbeCnt) - 1) / 2)|int %}

            # 6 ----- FORMAT THE PARAMETERS TO CALL BED_MESH_CALIBRATE --------------
            {% set mesh_min = "%d,%d"|format(xMin, yMin) %}
            {% set mesh_max = "%d,%d"|format(xMax, yMax) %}
            {% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
            RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
            BED_MESH_CALIBRATE MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}
        {% endif %}
    {% else %}
        RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
        BED_MESH_CALIBRATE
    {% endif %}